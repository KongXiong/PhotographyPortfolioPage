@*@model IEnumerable<PhotoPortfolio.Models.Revenue>*@

@model IEnumerable<PhotoPortfolio.Models.RevenueViewModel>
@*<link href='https://fonts.googleapis.com/css?family=Parisienne' rel='stylesheet' type='text/css'>*@
<script src="@Url.Content("~/Scripts/jquery-2.2.0.js")"></script>
<script src="@Url.Content("~/Scripts/jquery-validate.unobtrusive.js")"></script>


<div>
    <button class="btn btn-default" id="revenue">Add New Revenue</button>
    <button class="btn btn-default" id="createBtn">Add A Category</button>
    <button class="btn btn-default" id="quarterlybtn">See Quarterly</button>

    <div id="revenueDiv">
        <div id="Div2"></div>
    </div>

    <script>

        $(document).ready(function () {
            var revenue = '@Url.Action("CreatePartial", "Revenues")';
            var createRev = '@Url.Action("CreatePartial", "RevenueCategories")';
            var Quarterly = '@Url.Action("PartialQuarterly", "Revenues")';
            var revCat = '@Url.Action("CreatePartial", "Revenues")';
            $("#revenue").click(function () {
                $('#revenueDiv').load(revenue, { searchText: "" });
            })
            $("#createBtn").click(function () {
                {
                    $('#revenueDiv').load(createRev, { searchText: "" });
                }
            })
            $("#quarterlybtn").click(function () {
                {
                    $('#revenueDiv').load(Quarterly, { searchText: "" });
                }
            })
            $("#revCatbtn").click(function () {
                {
                    $('#revenueDiv').load(revCatbtn, { searchText: "" });
                }
            })
        });


    </script>
</div>

<h2></h2>

<div class="panel panel-default">
    <table class="col-lg-6" cellpadding="10">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.RegisteredUser.Firstname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RevenueCategory.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Total)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @(item.RegisteredUser.Firstname)
                </td>
                <td>
                    @(item.RevenueCategory.Name)
                </td>
                <td>
                    @(item.Total)
                </td>
                <td>
                    @(item.Date.ToShortDateString())
                </td>
            </tr>
        }
    </table>
</div>

@{

            double?[] result = ViewBag.totals;
            string test = "";

            for (int i = 0; i < result.Length; i++)
            {
                if (i == 0)
                {
                    test = test + result[i].ToString();
                }
                else
                {
                    test = test + "," + result[i].ToString();
                }
            }


            var Dates = ViewBag.dates;
            string dateString = "";
            foreach (var item in Dates)
            {
                if (dateString == "")
                {
                    dateString = dateString + item.ToString("dd");
                }
                else
                {
                    dateString = dateString + "," + item.ToString("dd");
                }
            }

}
<canvas id="myChart" width="650" height="350"></canvas>
<script>
        var result = "@test";
        var resultsArray = result.split(',');
        var somthing = "@dateString";
        var theThing = somthing.split(',');
        var context = $("#myChart").get(0).getContext("2d");
        var data = {
            labels: theThing,

            datasets: [{

                label: "My First dataset",
                fillColor: "rgba(39,242,242,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                highlightFill: "rgba(255,0,39,0.75)",
                highlightStroke: "rgba(220,220,220,1)",
                data: resultsArray
                }]
    };

    var options = {
        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: true,

        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,

        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",

        //Number - Width of the grid lines
        scaleGridLineWidth: 1,

        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,

        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,

        //Boolean - If there is a stroke on each bar
        barShowStroke: true,

        //Number - Pixel width of the bar stroke
        barStrokeWidth: 2,

        //Number - Spacing between each of the X value sets
        barValueSpacing: 5,

        //Number - Spacing between data sets within X values
        barDatasetSpacing: 1,

        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
    }
    var myBarChart = new Chart(context).Bar(data, options);
</script>