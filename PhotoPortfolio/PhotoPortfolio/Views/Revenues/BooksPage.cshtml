
@{
    ViewBag.Title = "BooksPage";
}
@Styles.Render("~/Content/css")

<body>
    <h2 style="font-family:'madina_script-webfont'; text-align: center;" >BooksPage</h2>
    <br />
    <br />
    <div class="container-fluid ">
        <div class="container" style="color:red" align="center">
            <div class="col-md-3" style="color:red; width:250px; height:200px; "align="center">
                <button class="btn">Revenues</button>                           
            </div>                                                              
            <div class="col-md-3" style="color:red; width:250px; height:200px; "align="center">
                <button class="btn">Expenses</button>                           
            </div>                                                              
            <div class="col-md-3" style="color:red; width:250px; height:200px; "align="center">
                <input type="button" class="btn" value="Clients" onclick="location.href='@Url.Action("AdminClientControls", "RegisteredUsers")'" />
                @*<button class="btn">Clients</button>*@                            
            </div>                                                              
            <div class="col-md-3" style="color:red; width:250px; height:200px; "align="center">
                <button class="btn bt">Reports</button>
            </div>
        </div>
        <br />
        <br />
        <div class="row" style="text-align:center;">
            <div class="col-md-4">
                <h1> HI Everyone</h1>
                <canvas id="myBarChart"></canvas>
            </div>
            <div class="col-md-4">
                <h1> HI Everyone</h1>
                <canvas id="myLineChart"></canvas>
            </div>
            
        </div>
    </div>


    @{
        double?[] result = ViewBag.totals;
        string test = "";

        for (int i = 0; i < result.Length; i++)
        {
            if (i == 0)
            {
                test = test + result[i].ToString();
            }
            else
            {
                test = test + "," + result[i].ToString();
            }
        }

        var Dates = ViewBag.dates;
        string dateString = "";
        foreach (var item in Dates)
        {
            if (dateString == "")
            {
                dateString = dateString + item;
            }
            else
            {
                dateString = dateString + "," + item;
            }
        }
    }
    <script>
        var result = "@test";
        var resultsArray = result.split(',');
        var somthing = "@dateString";
        var theThing = somthing.split(',');
        var context = $("#myBarChart").get(0).getContext("2d");
        var data = {
            labels: theThing,
            datasets: [{
                label: "My First dataset",
                fillColor: "rgba(39,242,242,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                highlightFill: "rgba(255,0,39,0.75)",
                highlightStroke: "rgba(220,220,220,1)",
                data: resultsArray
            }]
        };

        var options = {
            //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
            scaleBeginAtZero: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - If there is a stroke on each bar
            barShowStroke: true,
            //Number - Pixel width of the bar stroke
            barStrokeWidth: 2,
            //Number - Spacing between each of the X value sets
            barValueSpacing: 5,
            //Number - Spacing between data sets within X values
            barDatasetSpacing: 1,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        }
        var myBarChart = new Chart(context).Bar(data, options);
    </script>

    @{
        double?[] xresult = ViewBag.xtotals;
        string xtest = "";

        for (int i = 0; i < xresult.Length; i++)
        {
            if (i == 0)
            {
                xtest = xtest + xresult[i].ToString();
            }
            else
            {
                xtest = xtest + "," + xresult[i].ToString();
            }
        }

        var xDates = ViewBag.xdates;
        string xdateString = "";
        foreach (var item in xDates)
        {
            if (dateString == "")
            {
                xdateString = xdateString + item.ToString("dd");
            }
            else
            {
                xdateString = xdateString + "," + item.ToString("dd");
            }
        }
    }
    <script>
        var xresult = "@xtest";
        var xresultsArray = xresult.split(',');
        var xsomthing = "@xdateString";
        var xtheThing = xsomthing.split(',');
        var xcontext = $("#myLineChart").get(0).getContext("2d");
        var linedata = {
            labels: xtheThing,
            datasets: [{
                label: "My First dataset",
                fillColor: "rgba(39,242,242,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                pointColor: "rgba(220,220,220,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "rgba(255,0,39,0.75)",
                pointHighlightStroke: "rgba(220,220,220,1)",
                data: xresultsArray
            }]
        }
        var lineoptions = {
            ///Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether the line is curved between points
            bezierCurve: true,
            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.4,
            //Boolean - Whether to show a dot for each point
            pointDot: true,
            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            //Boolean - Whether to fill the dataset with a colour
            datasetFill: true,
        }
        var myLineChart = new Chart(xcontext).Line(linedata, lineoptions);

        //File Upload response from the server
 
    </script>
  
</body>